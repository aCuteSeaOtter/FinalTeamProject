<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.example.dao.ReviewDAO">

   <!-- 리뷰 목록 출력 -->
   <select id="getReviewList" parameterType="map" resultType="hashmap">
       WITH review_images AS (
           SELECT ri.review_id,
                  LISTAGG(ri.file_name, ',') WITHIN GROUP (ORDER BY ri.file_name) AS file_names
           FROM review_img ri
           GROUP BY ri.review_id
       ),
       review_likes AS (
           SELECT r.review_id,
                  COUNT(l.like_id) AS like_count
           FROM review r
           LEFT JOIN likes l ON r.review_id = l.review_id
           GROUP BY r.review_id
       ),
       paginated_reviews AS (
           SELECT r.review_id,
                  r.review_title,
                  r.review_regdate,
                  r.review_cnt,
                  m.member_nickname,
                  COALESCE(ri.file_names, '') AS file_names,
                  COALESCE(rl.like_count, 0) AS like_count,
                  ROW_NUMBER() OVER (ORDER BY COALESCE(rl.like_count, 0) DESC, r.review_id DESC) AS rn
           FROM review r
           INNER JOIN member m ON r.member_email = m.member_email
           LEFT JOIN review_images ri ON r.review_id = ri.review_id
           LEFT JOIN review_likes rl ON r.review_id = rl.review_id
           <where>
               <if test="searchKeyword != null and searchKeyword != ''">
                   LOWER(${searchCondition}) LIKE '%' || LOWER(#{searchKeyword}) || '%'
               </if>
           </where>
       )
       SELECT *
       FROM paginated_reviews
       WHERE rn BETWEEN #{offset} + 1 AND #{offset} + #{pageSize}
   </select>


   
   <!-- 총 리뷰 수 조회 -->
   <select id="getTotalCount" parameterType="map" resultType="int">
       SELECT COUNT(*)
       FROM review r
       INNER JOIN member m ON r.member_email = m.member_email
       <where>
           <if test="searchKeyword != null and searchKeyword != ''">
               LOWER(${searchCondition}) LIKE '%' || LOWER(#{searchKeyword}) || '%'
           </if>
       </where>
   </select>
       

   
   <!-- 리뷰 상세보기 -->
   <select id="getReview" parameterType="ReviewVO" resultType="hashmap">
       SELECT 
           r.review_id      review_id,
           r.review_title  review_title,
           m.member_nickname member_nickname,
           r.review_star,
           r.review_content,
           r.review_regdate,
           r.review_cnt,
           r.review_like,
           r.review_hate,
           m.member_email      member_email,
           ri.origin_file_name origin_file_name,
           ri.file_name      file_name
       FROM review r
       LEFT OUTER JOIN review_img ri
           ON r.review_id = ri.review_id
       LEFT OUTER JOIN member m
           ON r.member_email = m.member_email
       WHERE r.review_id = #{review_id}
   </select>

   <!-- 리뷰 작성 -->
   <insert id="insertReview" parameterType="ReviewVO">
      INSERT INTO review
      ( review_id, review_title, review_content, review_cnt, review_star, member_email, review_regdate)
      VALUES
      ( review_id_seq.NEXTVAL, #{review_title}, #{review_content}, 0, #{review_star}, #{member_email}, TO_CHAR(SYSDATE,'YY-MM-DD HH24:MI:SS'))
   </insert>
   
   <!-- 리뷰 수정 -->
   <update id="updateReview" parameterType="ReviewVO">
      UPDATE review SET
      review_title = #{review_title},
      review_content = #{review_content}
      WHERE review_id = #{review_id}
   </update>
   
   <!-- 리뷰 삭제 -->
   <delete id="deleteReview" parameterType="ReviewVO">
      DELETE FROM review
      WHERE review_id = #{review_id}
   </delete>
   
   <!-- 리뷰 조회수 증가 -->
   <update id="incrementViewCount" parameterType="ReviewVO">
        UPDATE review
        SET review_cnt = review_cnt + 1
        WHERE review_id = #{review_id}
    </update>
    
    <!-- 조회순 기준 쿼리 추가 -->
    <select id="getTopReviewsByViewCount" parameterType="int" resultType="hashmap">
          <![CDATA[
             WITH review_images AS (
                 SELECT ri.review_id,
                        LISTAGG(ri.file_name, ',') WITHIN GROUP (ORDER BY ri.file_name) AS file_names
                 FROM review_img ri
                 GROUP BY ri.review_id
             )
             SELECT * FROM (
                 SELECT r.review_id,
                        r.review_title,
                        r.review_regdate,
                        r.review_cnt,
                        m.member_nickname,
                        COALESCE(ri.file_names, '') AS file_names,
                        ROW_NUMBER() OVER (ORDER BY r.review_cnt DESC) AS rn
                 FROM review r
                 INNER JOIN member m ON r.member_email = m.member_email
                 LEFT JOIN review_images ri ON r.review_id = ri.review_id
             )
             WHERE rn <= 3
          ]]>
   </select>
   
   <!-- 좋아요 기준 쿼리 추가 -->
    <select id="getTopReviewsByLikeCount" parameterType="int" resultType="hashmap">
        <![CDATA[
        WITH review_images AS (
          SELECT ri.review_id,
                 LISTAGG(ri.file_name, ',') WITHIN GROUP (ORDER BY ri.file_name) AS file_names
          FROM review_img ri
          GROUP BY ri.review_id
      ),
      review_likes AS (
          SELECT r.review_id,
                 COUNT(l.like_id) AS like_count
          FROM review r
          LEFT JOIN likes l ON r.review_id = l.review_id
          GROUP BY r.review_id
      )
      SELECT * 
      FROM (
          SELECT r.review_id,
                 r.review_title,
                 r.review_regdate,
                 m.member_nickname,
                 COALESCE(ri.file_names, '') AS file_names,
                 COALESCE(rl.like_count, 0) AS like_count,
                 ROW_NUMBER() OVER (ORDER BY COALESCE(rl.like_count, 0) DESC) AS rn
          FROM review r
          INNER JOIN member m ON r.member_email = m.member_email
          LEFT JOIN review_images ri ON r.review_id = ri.review_id
          LEFT JOIN review_likes rl ON r.review_id = rl.review_id
      )
      WHERE rn <= 3
        ]]>
    </select>
    
</mapper>
